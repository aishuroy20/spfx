import * as React from 'react';
import { IGetmoredatausngreactNewProps } from './IGetmoredatausngreactNewProps';
import * as jQuery from 'jquery';
import 'datatables.net';
import 'datatables.net-dt/css/dataTables.dataTables.css';

export interface IListItem {
  Id:number;
  Title: string;
  Segment: string;
  Category: string;
  Quantity: string;
  Mode: string;
}

// interface ISharePointItem {
//   Id: any;
//   Title: string;
//   field_1: string;
//   field_2: string;
//   field_3: string;
//   field_4: string;
// }

export interface IGetmoredatausngreactNewState {
  items: IListItem[];
  error: string | null;
}

export default class GetmoredatausngreactNew extends React.Component<IGetmoredatausngreactNewProps, IGetmoredatausngreactNewState> {
  private tableRef: React.RefObject<HTMLTableElement>;

  constructor(props: IGetmoredatausngreactNewProps) {
    super(props);
    this.state = {
      items: [],
      error: null,
    };
    this.tableRef = React.createRef();
  }

  public componentDidMount(): void {
    this._fetchAllData();
  }

  private async _fetchAllData(): Promise<void> {
    try {
      const listTitle = "ListData"; // Change to your list title
      let allItems: IListItem[] = [];
      let nextPageUrl: string | null = null;
  
      const fetchPageData = async (url: string): Promise<void> => {
        try {
          const response = await fetch(url, {
            method: 'GET',
            headers: {
              'Accept': 'application/json;odata=nometadata',
              'Content-Type': 'application/json'
            }
          });
  
          if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP error! Status: ${response.status}. Response: ${errorText}`);
          }
  
          const data = await response.json();
          console.log('Fetched data:', data);
  
          // Process current page's data
          const items = data.value.map((item: any): IListItem => ({
            Id: item.Id,
            Title: item.Title,
            Segment: item.field_1,
            Category: item.field_2,
            Quantity: item.field_3,
            Mode: item.field_4
          }));
  
          allItems = allItems.concat(items);
          console.log(`Number of items fetched in this page: ${items.length}`);
  
          // Check if there is more data to fetch
          nextPageUrl = data['odata.nextLink'] || null;
  
          if (nextPageUrl) {
            // Continue fetching the next page
            await fetchPageData(nextPageUrl);
          }
  
        } catch (error) {
          console.error("Error fetching page data: ", error);
          throw error;
        }
      };
  
      // Start fetching from the initial URL
      const initialUrl = `${this.props.context.pageContext.web.absoluteUrl}/_api/web/lists/getbytitle('${encodeURIComponent(listTitle)}')/items?$select=ID,Title,field_1,field_2,field_3,field_4&$top=5000&$orderby=ID asc`;
      await fetchPageData(initialUrl);
  
      console.log('Total items fetched:', allItems.length);
  
      this.setState({ items: allItems, error: null }, () => {
        if (this.tableRef.current) {
          if (jQuery.fn.DataTable.isDataTable(this.tableRef.current)) {
            jQuery(this.tableRef.current).DataTable().clear().destroy();
          }
  
          jQuery(this.tableRef.current).DataTable({
            data: allItems,
            columns: [
              { title: "ID", data: "Id" },
              { title: "Title", data: "Title" },
              { title: "Segment", data: "Segment" },
              { title: "Category", data: "Category" },
              { title: "Quantity", data: "Quantity" },
              { title: "Mode", data: "Mode" }
            ],
            paging: true,
            searching: true,
            ordering: true,
            pageLength: 10,
          });
        }
      });
  
    } catch (error) {
      console.error("Error fetching all data: ", error);
      this.setState({ error: error.message });
    }
  }
  

  public render(): React.ReactElement<IGetmoredatausngreactNewProps> {
    const { error } = this.state;

    return (
      <div>
        <h3>List Items</h3>
        {error && <p>Error: {error}</p>}
        <table ref={this.tableRef} className="display"></table>
      </div>
    );
  }
}
